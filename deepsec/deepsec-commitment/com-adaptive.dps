// Simple examples showing UC / RSCHP in deepsec

// We, introduce communication channels under the environment's control.
// We reserve the nice names env and adv for the protocol and, for the moment,
// do not distinguish incoming and outgoing channels

(* public channels, wrapper *)
free 
     e2p
   , p2e
   , e2q
   , q2e
   , e2s
   , s2e [private]
   . 

(* public channels, given *)
free e2z,z2e . 

(* private channels (real) *)
free 
     p2s
   , s2p
   , q2s
   , s2q[private]
.

(* private channels (extra ideal ones)*)
free 
     p2f
   , f2a
   , p2a
   , a2p
   , a2q
   , a2s
   , s2a
   [private]
.
   (* legend: 
        e .. env
        p .. protocol: committer
        q .. protocol: receiver
        a .. attacker
        s .. subprotocol (CRS) 
    *)

fun xor/2.
reduc dexor1(a,xor(a,b)) -> b.
reduc dexor2(b,xor(a,b)) -> a.

fun prg/2. (* prg(key,seed) represent PRG with trapdoor hidden in key *)
fun keygen/1.
(* example: *)
(* reduc adec( aenc(pk(sk),m), sk ) -> m. *)
(* first draft *)
reduc invert(prg(keygen(trapdoor),seed),trapdoor) -> seed. 

const Commit, Commit2, Commited, Open, Open2, Opened, Receipt, GetCRS, WaitCRS, Waited, StartCRS, Started, PublicStrings, Error, Leak, DoCommit, SynchOpen, Synched, SynchOpen2, Synched2. // messages
const FakeSetup, Fake, StartS. // internal message of simulator
const Ok.
const Ack.

const zero.
(* const one. *) (* every value that  is not zero is interpreted as one *)


// Protocol 

let committer() =
    in(s2p, x2); let (=WaitCRS) = x2 in
    out(p2s, Waited);
    (* then continue as P *)
    in(e2p, x3); let (=Commit, b) = x3 in
    out(p2e, (Leak, b));
    in(e2p, x100); let (=DoCommit) = x100 in
    out(p2s, GetCRS);
    in(s2p, x4); let (=PublicStrings, s, pk0, pk1) = x4 in
    new r;
    if b=zero then (
        out(p2e, (Commit2,prg(pk0,r)));
        in(s2p, x101); let(=SynchOpen) = x101 in
        out(p2s, Synched);
        in(e2p, x5); let (=Open) = x5 in
        out(p2s, SynchOpen2);
        in(s2p, x103); let(=Synched2) = x103 in
        out(p2e, (Open2,b,r))
        )
    else (
        out(p2e, (Commit2,xor(prg(pk1,r),s)));
        in(e2p, x6); let (=Open) = x6 in
        out(p2e, (Open2,b,r))
        )
.

let receiver() =
    in(s2q, x104); let (=WaitCRS) = x104 in
    out(q2s, Waited);
    in(e2q, x7); let (=Commit2, y) = x7 in
    out(q2s, GetCRS);
    in(s2q, x8); let (=PublicStrings, s, pk0, pk1) = x8 in
    out(q2e, Receipt);
    in(s2q, x105); let (=SynchOpen) = x105 in
    out(q2s, Synched);
    in(e2q, x9); let (=Open2, b, r) = x9 in
    if b=zero then (
        if y= prg(pk0,r) then
            out(q2e, (Opened, b))
        else
            out(q2e, Error)
            )
    else (
        if y= xor(prg(pk1,r),s) then
            out(q2e, (Opened, b))
        else
            out(q2e, Error)
            )
.

let CRS() =
    in(e2s, x11); let (=GetCRS) = x11 in
    new s;
    new tr0;
    new tr1;
    out(s2p, WaitCRS);
    in(p2s, x12); let (=Waited) = x12 in
    out(s2e, (PublicStrings, s, keygen(tr0), keygen(tr1)));
    in(p2s, x13); let (=GetCRS) = x13 in
    out(s2q, WaitCRS);
    in(q2s, x106); let (=Waited) = x106 in
    out(s2p, (PublicStrings, s, keygen(tr0), keygen(tr1)));
    in(q2s, x14); let (=GetCRS) = x14 in
    out(s2p, SynchOpen);
    in(p2s, x107); let (=Synched) = x107 in
    out(s2q, (PublicStrings, s, keygen(tr0), keygen(tr1)));
    in(p2s, x108); let (=SynchOpen2) = x108 in
    out(s2q, SynchOpen);
    in(q2s, x109); let (=Synched) = x109 in
    out(s2p, Synched2);
    0
.

// Ideal Functionality

let dummy_committer =
    in(s2p, x15); let =WaitCRS = x15 in 
    out(p2s, Waited);
    in(e2p,x24); out(p2f,x24);
    in(a2p,x26); out(p2e,x26);
    in(e2p,x25); out(p2f,x25);
    in(e2p,x110); out(p2a,x110);
    in(e2p,x111); out(p2f,x111);
    in(e2p,x112); out(p2a,x112);
    0
    .

let dummy_receiver = 
    in(a2q,x27); out(q2e,x27);
    in(a2q,x113); out(q2e,x113);
    in(a2q,x114); out(q2e,x114);
    in(a2q,x115); out(q2e,x115);
    0
    .

let sim = 
    in(s2a,x140); let (=StartS) = x140 in
    out(a2s,FakeSetup);
    in(s2a,x17); let (=Fake, pk0, pk1, td0, td1, s)  = x17 in
    out(a2s,Ok);
    in(f2a, x141); let (=Leak, b) = x141 in
    // Required by in(q2e,x134leakb); out(e2z,x134leakb); in the env 
    out(a2p, (Leak, b));
    in(f2a, x142); let (=Receipt) = x142 in
    new r;
    if b=zero then (
        out(a2q, (Commit2,prg(pk0,r)));
        in(p2a, x143); let (=Commit2, y') = x143 in
        out(a2q, Receipt);
        in(f2a, x144); let (=Opened, b'') = x144 in
        out(a2q, (Open2, b,r));
        in(p2a, x145); let (=Open2, b', r') = x145 in
        if r = r' then (
            if b' = b then (
                if y'=prg(pk0,r) then (
                    out(a2q, (Opened, b))
                ) else (
                    0
                )
            ) else (
                0
            )
        ) else (
            0
        )
    ) else (
        out(a2q, (Commit2,xor(prg(pk1,r),s)));
        in(p2a, x153); let (=Commit2, y') = x153 in
        out(a2q, Receipt);
        in(f2a, x154); let (=Opened, b''') = x154 in
        out(a2q, (Open2, b,r));
        in(p2a, x155); let (=Open2, b', r') = x155 in
        if r = r' then (
            if b' = b then (
                if y'=xor(prg(pk1,r),s) then (
                    out(a2q, (Opened, b))
                ) else (
                    0
                )
            ) else (
                0
            )
        ) else (
            0
        )
    )
    .

let fakecrs = 
    in(e2s, x160); let (=GetCRS) = x160 in
    out(s2a, StartS);
    in(a2s,x19); let (=FakeSetup) = x19 in
    new td0;
    new td1;
    new r0;
    new r1;
    let pk0 = keygen(td0) in
    let pk1 = keygen(td1) in
    let fake_s = xor(prg(pk0,r0),prg(pk1,r1)) in
    out(s2a, (Fake, pk0, pk1, td0, td1, fake_s));
    in(a2s, x161); let (=Ok) = x161 in
    out(s2p, WaitCRS);
    in(p2s, x21); let (=Waited) = x21 in 
    out(s2e, (PublicStrings, fake_s, pk0, pk1))
    .

let COM = 
    in(p2f,x22); let (=Commit,b) = x22 in
    out(f2a,(Leak,b));
    in(p2f, x120); let (=DoCommit) = x120 in
    out(f2a,Receipt);
    in(p2f,x23); let (=Open) = x23 in
    out(f2a,(Opened,b))
    .

let env = 
    in(z2e,x32getcrs); out(e2s,x32getcrs);
    in(s2e,x33pubstrings); out(e2z,x33pubstrings);
    
    in(z2e,x34commit); out(e2p,x34commit);
    in(p2e,x134leakb); out(e2z,x134leakb);

    in(z2e,x135docommit); out(e2p,x135docommit);
    in(q2e,x136commit2); out(e2z,x136commit2);
    
    in(z2e,x137commit2); out(e2p,x137commit2);
    in(q2e,x35receipt); out(e2z,x35receipt);

    in(z2e,x36open); out(e2p,x36open);
    in(q2e,x138open2); out(e2z, x138open2);

    in(z2e,x139open2); out(e2p, x139open2);
    in(q2e,x37opened); out(e2z,x37opened);
    0
    .

let realw = env | committer | receiver | CRS.
let idealw = env |  dummy_committer | dummy_receiver | COM | sim | fakecrs . 


query trace_equiv(idealw,realw).

